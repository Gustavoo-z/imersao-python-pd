# -*- coding: utf-8 -*-
"""imersao_dados_python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kmM8NPOH4HvUKnVyqyraA_p4wHx3KrPT

<a href="https://colab.research.google.com/github/Gustavoo-z/imersao-python-pd/blob/main/imersao_dados_python.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

# Análise de Dados com Pandas
"""

import pandas as pd

df = pd.read_csv("https://raw.githubusercontent.com/guilhermeonrails/data-jobs/main/salaries.csv")

df.head(10)

df.info()

df.describe()

df.shape

linhas, colunas = df.shape[0], df.shape[1]
print("Linhas:", linhas)
print("Colunas:", colunas)

df.columns

# Dicionário para traduzir os nomes das colunas
traducao_colunas = {
    'work_year': 'ano',
    'experience_level': 'senioridade',
    'employment_type': 'contrato',
    'job_title': 'cargo',
    'salary': 'salario',
    'salary_currency': 'moeda',
    'salary_in_usd': 'usd',
    'employee_residence': 'residencia',
    'remote_ratio': 'remoto',
    'company_location': 'empresa',
    'company_size': 'tamanho_empresa'
}

# Renomear as colunas do DataFrame
df = df.rename(columns=traducao_colunas)

display(df.columns)

df["senioridade"].value_counts()

df["contrato"].value_counts()

df["remoto"].value_counts()

df["tamanho_empresa"].value_counts()

df["senioridade"].value_counts()

traducao_remoto = {
    0: 'Presencial',
    50: 'Híbrido',
    100: 'Remoto'
}

df['remoto'] = df['remoto'].replace(traducao_remoto)

display(df['remoto'].value_counts())

traducao_contrato = {
    'FT': 'Tempo Integral',
    'CT': 'Contrato',
    'PT': 'Meio Período',
    'FL': 'Freelancer'
}

df['contrato'] = df['contrato'].replace(traducao_contrato)

display(df['contrato'].value_counts())

traducao_tamanho_empresa = {
    'M': 'Médio',
    'L': 'Grande',
    'S': 'Pequeno'
}

df['tamanho_empresa'] = df['tamanho_empresa'].replace(traducao_tamanho_empresa)

display(df['tamanho_empresa'].value_counts())

traducao_senioridade = {
    'SE': 'Sênior',
    'MI': 'Pleno',
    'EN': 'Júnior',
    'EX': 'Executivo'
}

df['senioridade'] = df['senioridade'].replace(traducao_senioridade)

display(df['senioridade'].value_counts())

df.head()

df.describe(include='object')

"""# Preparação e limpeza dos Dados"""

df.isnull()

df.head()

df.isnull().sum()

df['ano'].unique()

df[df.isnull().any(axis=1)]

import numpy as np

# Criação de um dataframe para teste
df_salarios = pd.DataFrame({
    'nome': ['Ana', 'Bruno', 'Carlos', 'Daniele', "Val"],
    'salario': [4000, np.nan, 5000, np.nan, 100000]
})

# Calcula média, substitui os nulos e arredonda valores
df_salarios['salario_media'] = df_salarios['salario'].fillna(df_salarios['salario'].mean().round(2))

# Calcula mediana e substitui os nulos pela mediana
df_salarios['salario_mediana'] = df_salarios['salario'].fillna(df_salarios['salario'].median())

df_salarios

df_temperaturas = pd.DataFrame({
    'dia': ['Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta'],
    'temperatura': [30, np.nan, np.nan, 28, 27]
})

# Preenche os valores ausentes (NaN) para frente (forward fill)
df_temperaturas['preenchido_ffill'] = df_temperaturas['temperatura'].ffill()

# Preenche os valores ausentes (NaN) para trás (backward fill)
df_temperaturas['preenchido_bfill'] = df_temperaturas['temperatura'].bfill()

df_temperaturas

df_cidades = pd.DataFrame({
    'nome': ['Ana', 'Bruno', 'Carlos', 'Daniele', "Val"],
    'cidade': ['São Paulo', np.nan, 'Curitiba', np.nan, 'Belém']
})

# Preenche os valores ausentes na coluna 'cidade' com o texto 'Não informado'
df_cidades['cidade_preenchida'] = df_cidades['cidade'].fillna('Não informado')

df_cidades

df_limpo = df.dropna()
df_limpo.isnull().sum()

df_limpo.head()

df_limpo.info()

df_limpo = df_limpo.assign(ano = df_limpo['ano'].astype('int64'))
df_limpo

"""# Visualização de Dados
Aprendendo a criar gráficos estatísticos para explorar e comunicar informações presentes nos dados. Histogramas, boxplots, barras, etc.
"""

df_limpo.head()

df_limpo['senioridade'].value_counts().plot(kind='bar', title='Distribuição de senioridade')

import seaborn as sns

sns.barplot(data=df_limpo, x='senioridade', y='usd')

import matplotlib.pyplot as plt

plt.figure(figsize=(8,5))
sns.barplot(data=df_limpo, x='senioridade', y='usd')
plt.title('Salário médio por senioridade')
plt.xlabel('Senioridade')
plt.ylabel('Salário médio anual (USD)')
plt.show()

df_limpo.groupby('senioridade')['usd'].mean().sort_values(ascending=False)

ordem = df_limpo.groupby('senioridade')['usd'].mean().sort_values(ascending=False).index
ordem

plt.figure(figsize=(8,5))
sns.barplot(data=df_limpo, x='senioridade', y='usd', order=ordem)
plt.title('Salário médio por senioridade')
plt.xlabel('Senioridade')
plt.ylabel('Salário médio anual (USD)')
plt.show()

plt.figure(figsize=(8,5))
sns.histplot(df_limpo['usd'], bins=50, kde=True)
plt.title('Distribuição dos salários anuais')
plt.xlabel('Salários em USD')
plt.ylabel('Frequência')
plt.show()

plt.figure(figsize=(8,5))
sns.boxplot(x=df_limpo['usd'])
plt.title('Boxplot salário')
plt.xlabel('Salários em USD')
plt.show()

ordem_senioridade = ['Júnior', 'Pleno', 'Sênior', 'Executivo']

plt.figure(figsize=(8,5))
sns.boxplot(x='senioridade', y='usd', data=df_limpo, order=ordem_senioridade)
plt.title('Distribuição salarial por serionidade')
plt.xlabel('Salários em USD')
plt.show()

ordem_senioridade = ['Júnior', 'Pleno', 'Sênior', 'Executivo']

plt.figure(figsize=(8,5))
sns.boxplot(x='senioridade', y='usd', data=df_limpo, order=ordem_senioridade, palette='Set2', hue='senioridade')
plt.title('Distribuição salarial por serionidade')
plt.xlabel('Salários em USD')
plt.show()

import plotly.express as px

df_senioridade_usd = df_limpo.groupby('senioridade')['usd'].mean().sort_values(ascending=False).reset_index()

fig = px.bar(df_senioridade_usd, x='senioridade', y='usd',
             title='Média Salarial por Senioridade',
             labels={'senioridade': 'Senioridade', 'usd': 'Média Salarial Anual (USD)'})
fig.show()

remoto_contagem = df_limpo['remoto'].value_counts().reset_index()
remoto_contagem.columns = ['tipo_trabalho', 'quantidade']

fig = px.pie(remoto_contagem,
             names='tipo_trabalho',
             values='quantidade',
             title='Proporção dos tipos de trabalho'
             )
fig.update_traces(textinfo='percent+label')
fig.show()

remoto_contagem = df_limpo['remoto'].value_counts().reset_index()
remoto_contagem.columns = ['tipo_trabalho', 'quantidade']

fig = px.pie(remoto_contagem,
             names='tipo_trabalho',
             values='quantidade',
             title='Proporção dos tipos de trabalho',
             hole=0.5
             )
fig.update_traces(textinfo='percent+label')
fig.show()

pip install pycountry

import pycountry

# Função para converter ISO-2 para ISO-3
def iso2_to_iso3(code):
    try:
        return pycountry.countries.get(alpha_2=code).alpha_3
    except:
        return None

# Criar nova coluna com código ISO-3
df_limpo['residencia_iso3'] = df_limpo['residencia'].apply(iso2_to_iso3)

# Calcular média salarial por país (ISO-3)
df_ds = df_limpo[df_limpo['cargo'] == 'Data Scientist']
media_ds_pais = df_ds.groupby('residencia_iso3')['usd'].mean().reset_index()

# Gerar o mapa
fig = px.choropleth(media_ds_pais,
                    locations='residencia_iso3',
                    color='usd',
                    color_continuous_scale='rdylgn',
                    title='Salário médio de Cientista de Dados por país',
                    labels={'usd': 'Salário médio (USD)', 'residencia_iso3': 'País'})

fig.show()

df_limpo.head()

df_limpo.to_csv('dados-imersao-final.csv', index=False)

"""# Construindo um Dashboard com Streamlit
Aprendendo a usar a biblioteca Steamlit para a criação de um dashboard interativo simples, que permite visualizar dados filtrados e gerar gráficos de forma prática.

1. **Criar o ambiente virtual:**

```bash
py -m venv .venv

2. **Ativar o ambiente virtual em Windows:**

```bash
.venv\Scripts\Activate

3. **Ativar o ambiente virtual em MAC/LINUX**

```bash
source .venv/bin/activate

4. **Criar um arquivo chamado requirements.txt e adicionar os pacotes necessários**

```bash
pandas==2.2.3
streamlit==1.44.1
plotly===5.24.1

5. **Instalar as bibliotecas necessárias**

```bash
pip install -r requirements.txt

6. **Criar a interface do Dashboard com Streamlit**

7. **Realizar o deploy do Dashboard no Streamlit Cloud: https://streamlit.io/cloud**
"""